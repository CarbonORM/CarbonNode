name: Publish to npm on version bump (registry check)

on:
  push:
    branches: [ main ]
    # paths: [ package.json ]

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - uses: shogo82148/actions-setup-mysql@v1
        with:
          mysql-version: "8.0"
          my-cnf: |
            innodb_log_file_size=256MB
            innodb_buffer_pool_size=512MB
            max_allowed_packet=16MB
            max_connections=50
            local_infile=1
            root-password=password

      - name: Wait for MySQL
        run: |
          for i in {1..60}; do
            if mysqladmin --defaults-file=$MYSQL_HOME/.my.cnf ping >/dev/null 2>&1; then
              mysql --defaults-file=$MYSQL_HOME/.my.cnf -e "SELECT VERSION();"
              exit 0
            fi
            sleep 1
          done
          echo "MySQL did not become ready in time" >&2
          exit 1

      - name: Setup MySQL client config
        run: |
          cat > $MYSQL_HOME/.my.cnf <<'EOF'
          [client]
          user=root
          password=password
          host=127.0.0.1
          port=3306
          protocol=tcp
          EOF
          chmod 600 $MYSQL_HOME/.my.cnf

      - name: Load schema
        if: hashFiles('src/__tests__/sakila-db/sakila-schema.sql') != ''
        run: |
          mysql --defaults-file=$MYSQL_HOME/.my.cnf -e "CREATE DATABASE IF NOT EXISTS sakila;"
          mysql --defaults-file=$MYSQL_HOME/.my.cnf sakila < src/__tests__/sakila-db/sakila-schema.sql
          mysql --defaults-file=$MYSQL_HOME/.my.cnf sakila < src/__tests__/sakila-db/sakila-data.sql

      - name: Read package name & version
        id: pkg
        run: |
          set -euo pipefail
          NAME=$(jq -r .name package.json)
          VER=$(jq -r .version package.json)
          echo "name=$NAME" >> "$GITHUB_OUTPUT"
          echo "version=$VER" >> "$GITHUB_OUTPUT"

      # Public packages: npm view does not need auth.
      # Private/scoped packages: npm view will use NODE_AUTH_TOKEN if provided.
      - name: Check if version already published
        id: exists
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} # optional for private
        run: |
          set -euo pipefail
          NAME="${{ steps.pkg.outputs.name }}"
          VER="${{ steps.pkg.outputs.version }}"

          if npm view "$NAME@$VER" version >/dev/null 2>&1; then
            echo "published=true"  >> "$GITHUB_OUTPUT"
            echo "Package $NAME@$VER already on npm. Skipping publish."
          else
            echo "published=false" >> "$GITHUB_OUTPUT"
            echo "Package $NAME@$VER not found on npm. Will publish."
          fi

      - name: Install
        if: steps.exists.outputs.published == 'false'
        run: npm ci

      - name: Test
        if: steps.exists.outputs.published == 'false'
        run: npm test --if-present

      - name: Publish
        if: steps.exists.outputs.published == 'false'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public --provenance

      - name: Skip (already published)
        if: steps.exists.outputs.published == 'true'
        run: echo "Version already on npm; skipping publish."