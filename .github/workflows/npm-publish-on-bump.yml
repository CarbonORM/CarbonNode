name: Publish to npm on version bump (registry check)

on:
  push:
    branches: [ main ]
    # paths: [ package.json ]

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - uses: mirromutth/mysql-action@v1.1
        with:
          character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
          collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
          mysql version: '8.0' # Optional, default value is "latest". The version of the MySQL
          host port: 3306
          container port: 3306
          mysql database: 'sakila' # Optional, default value is "test". The specified database which will be create
          mysql root password: 'password' # Required if "mysql user" is empty, default is empty. The root superuser password
          mysql user: 'developer' # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
          mysql password: 'password' # Required if "mysql user" exists. The password for the "mysql user"

      - name: Wait for MySQL
        run: |
          for i in {1..60}; do
            if mysqladmin --defaults-file=~/.my.cnf ping >/dev/null 2>&1; then
              mysql --defaults-file=~/.my.cnf -e "SELECT VERSION();"
              exit 0
            fi
            sleep 1
          done
          echo "MySQL did not become ready in time" >&2
          exit 1

      - name: Setup MySQL client config
        run: |
          cat > ~/.my.cnf <<'EOF'
          [client]
          user=root
          password=password
          host=127.0.0.1
          EOF
          chmod 600 ~/.my.cnf

      - name: Load schema
        if: hashFiles('src/__tests__/sakila-db/sakila-schema.sql') != ''
        run: |
          mysql --defaults-file=~/.my.cnf -e "CREATE DATABASE IF NOT EXISTS sakila;"
          mysql --defaults-file=~/.my.cnf sakila < src/__tests__/sakila-db/sakila-schema.sql
          mysql --defaults-file=~/.my.cnf sakila < src/__tests__/sakila-db/sakila-data.sql

      - name: Read package name & version
        id: pkg
        run: |
          set -euo pipefail
          NAME=$(jq -r .name package.json)
          VER=$(jq -r .version package.json)
          echo "name=$NAME" >> "$GITHUB_OUTPUT"
          echo "version=$VER" >> "$GITHUB_OUTPUT"

      # Public packages: npm view does not need auth.
      # Private/scoped packages: npm view will use NODE_AUTH_TOKEN if provided.
      - name: Check if version already published
        id: exists
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} # optional for private
        run: |
          set -euo pipefail
          NAME="${{ steps.pkg.outputs.name }}"
          VER="${{ steps.pkg.outputs.version }}"

          if npm view "$NAME@$VER" version >/dev/null 2>&1; then
            echo "published=true"  >> "$GITHUB_OUTPUT"
            echo "Package $NAME@$VER already on npm. Skipping publish."
          else
            echo "published=false" >> "$GITHUB_OUTPUT"
            echo "Package $NAME@$VER not found on npm. Will publish."
          fi

      - name: Install
        if: steps.exists.outputs.published == 'false'
        run: npm ci

      - name: Test
        if: steps.exists.outputs.published == 'false'
        run: npm test --if-present

      - name: Publish
        if: steps.exists.outputs.published == 'false'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public --provenance

      - name: Skip (already published)
        if: steps.exists.outputs.published == 'true'
        run: echo "Version already on npm; skipping publish."