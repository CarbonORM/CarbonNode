// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection

import {
    C6Constants,
    iC6Object,
    iC6RestfulModel,
    tC6Tables,
    iDynamicApiImport,
    removePrefixIfExists,
    restOrm,
    iRest
} from "@carbonorm/carbonnode";
import * as GeoJSON from 'geojson';{{#if CUSTOM_IMPORTS}},
{{{CUSTOM_IMPORTS}}}{{/if}}

export const RestTablePrefix = '{{{PREFIX}}}';

export type RestTableNames = {{{RestTableNames}}};

export type RestShortTableNames = {{{RestShortTableNames}}};

{{#TABLES}}

/**
{{{TABLE_DEFINITION}}}
**/

export interface i{{TABLE_NAME_SHORT_PASCAL_CASE}} {
{{#each TYPE_VALIDATION}}
    '{{this.COLUMN_NAME}}'?: {{{this.TYPESCRIPT_TYPE}}}{{^NOT_NULL}} | null{{/NOT_NULL}};
{{/each}}
}

interface iDefine{{TABLE_NAME_SHORT_PASCAL_CASE}} {
{{#each COLUMNS_UPPERCASE}}
    '{{@key}}': string;
{{/each}}
}

export type {{TABLE_NAME_SHORT_PASCAL_CASE}}PrimaryKeys = {{#PRIMARY_SHORT}}
    '{{this}}'{{#unless @last}} |{{else}};{{/unless}}
{{/PRIMARY_SHORT}}

export const {{TABLE_NAME_SHORT}}:
    iC6RestfulModel<
        '{{TABLE_NAME_SHORT}}',
        i{{TABLE_NAME_SHORT_PASCAL_CASE}},
        {{TABLE_NAME_SHORT_PASCAL_CASE}}PrimaryKeys
    >
    & iDefine{{TABLE_NAME_SHORT_PASCAL_CASE}} = {
    TABLE_NAME: '{{TABLE_NAME}}',
    {{#each COLUMNS_UPPERCASE}}
    {{@key}}: '{{this}}',
    {{/each}}
    PRIMARY: [
    {{#PRIMARY}}
        '{{this}}',
    {{/PRIMARY}}
    ],
    PRIMARY_SHORT: [
    {{#each PRIMARY_SHORT}}
        '{{this}}',
    {{/each}}
    ],
    COLUMNS: {
    {{#each COLUMNS}}
        '{{@key}}': '{{this}}',
    {{/each}}
    },
    TYPE_VALIDATION: {
    {{#each TYPE_VALIDATION}}
        '{{@key}}': {
            MYSQL_TYPE: '{{this.MYSQL_TYPE}}',
            MAX_LENGTH: '{{this.MAX_LENGTH}}',
            AUTO_INCREMENT: {{this.AUTO_INCREMENT}},
            SKIP_COLUMN_IN_POST: {{this.SKIP_COLUMN_IN_POST}}
        },
    {{/each}}
    },
    REGEX_VALIDATION: {
    {{#each REGEX_VALIDATION}}
        '{{@key}}': '{{this}}',
    {{/each}}
    },
    LIFECYCLE_HOOKS: {
        GET: {beforeProcessing:{}, beforeExecution:{}, afterExecution:{}, afterCommit:{}},
        PUT: {beforeProcessing:{}, beforeExecution:{}, afterExecution:{}, afterCommit:{}},
        POST: {beforeProcessing:{}, beforeExecution:{}, afterExecution:{}, afterCommit:{}},
        DELETE: {beforeProcessing:{}, beforeExecution:{}, afterExecution:{}, afterCommit:{}},
    },
    TABLE_REFERENCES: {
        {{#each TABLE_REFERENCES}}'{{@key}}': [{{#this}}{
            TABLE: '{{TABLE}}',
            COLUMN: '{{COLUMN}}',
            CONSTRAINT: '{{CONSTRAINT}}',
        },{{/this}}],{{/each}}
    },
    TABLE_REFERENCED_BY: {
        {{#each TABLE_REFERENCED_BY}}'{{@key}}': [{{#this}}{
            TABLE: '{{TABLE}}',
            COLUMN: '{{COLUMN}}',
            CONSTRAINT: '{{CONSTRAINT}}',
        },{{/this}}],{{/each}}
    }
}

{{/TABLES}}

export const TABLES: tC6Tables = {
{{#TABLES}}
    {{TABLE_NAME_SHORT}}: {{TABLE_NAME_SHORT}},
{{/TABLES}}
};

let dynamicImportCache : Record<string, iDynamicApiImport> = {};

// The only reason this function is here/dynamic is due to the relative import (using `./`)
async function dynamicRestImport(tableName: string) : Promise<iDynamicApiImport> {

    tableName = tableName.toLowerCase();

    if (dynamicImportCache[tableName]) {

            return dynamicImportCache[tableName]

    }

    // if tableName is not a key in the TABLES object then throw an error
    if (!TABLES[tableName]) {

        const error = (table: string) => {
            throw Error('Table (' + table + ') does not exist in the TABLES object. Possible values include (' + Object.keys(TABLES).join(', ') + ')');
        }

        if (!tableName.startsWith(RestTablePrefix.toLowerCase())) {

            error(tableName);

        }

        tableName = removePrefixIfExists(tableName, RestTablePrefix);

        if (!TABLES[tableName]) {

            error(tableName);

        }

    }

    // This will rightfully throw a dynamic import warning in the console, but it is necessary to use dynamic imports
    const module = await import(/* @vite-ignore */ './' + (tableName.split('_')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join('_')) + '.ts');

    dynamicImportCache[tableName] = module

    return module

}

export const C6 : iC6Object = {
    ...C6Constants,
    C6VERSION: '{{C6VERSION}}',
    IMPORT: dynamicRestImport,
    PREFIX: RestTablePrefix,
    TABLES: TABLES,
    ...TABLES
};

export type RestTableInterfaces = {{{RestTableInterfaces}}};

export type tStatefulApiData<T> = T[] | undefined | null;

// this refers to the value types of the keys above, aka values in the state
export interface iRestfulObjectArrayTypes {
    {{#TABLES}}
    {{TABLE_NAME_SHORT}}: tStatefulApiData<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>,
    {{/TABLES}}
}

export type tRestfulObjectArrayValues = iRestfulObjectArrayTypes[keyof iRestfulObjectArrayTypes];

export const initialRestfulObjectsState: iRestfulObjectArrayTypes = {
    {{#TABLES}}
    {{TABLE_NAME_SHORT}}: undefined,
    {{/TABLES}}
};

export const COLUMNS = {
    {{#TABLES}}{{#each TYPE_VALIDATION}}'{{@key}}': '{{this.COLUMN_NAME}}',{{/each}}
 {{/TABLES}}
};

export const GLOBAL_REST_PARAMETERS: Omit<iRest<
    RestShortTableNames,
    RestTableInterfaces>, "requestMethod" | "restModel"> = {
        C6: C6,
        restURL: {{{REST_URL_EXPRESSION}}},
};

{{#TABLES}}
export const {{TABLE_NAME_SHORT_PASCAL_CASE}} = restOrm<
    '{{TABLE_NAME_SHORT}}',
    i{{TABLE_NAME_SHORT_PASCAL_CASE}},
    {{TABLE_NAME_SHORT_PASCAL_CASE}}PrimaryKeys{{#if INTERFACE_OVERRIDES}},
    {{{INTERFACE_OVERRIDES}}}{{/if}}
>({
    ...GLOBAL_REST_PARAMETERS,
    restModel: {{TABLE_NAME_SHORT}}{{#if OBJECT_OVERRIDES}},
    {{{OBJECT_OVERRIDES}}}{{/if}}
});

{{/TABLES}}


