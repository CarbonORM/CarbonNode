// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection

import type {
    C6RestfulModel,
    iC6Object,
    iRest,
    OrmGenerics,
} from "@carbonorm/carbonnode";
import { C6Constants, restOrm } from "@carbonorm/carbonnode";
import type * as GeoJSON from "geojson";
{{{CUSTOM_IMPORTS}}}{{/if}}

export const RestTablePrefix = '{{{PREFIX}}}';

export type RestTableNames = {{{RestTableNames}}};

export type RestShortTableNames = {{{RestShortTableNames}}};

{{#TABLES}}

/**
{{{TABLE_DEFINITION}}}
**/

export interface i{{TABLE_NAME_SHORT_PASCAL_CASE}} {
{{#each TYPE_VALIDATION}}
    '{{this.COLUMN_NAME}}'?: {{{this.TYPESCRIPT_TYPE}}}{{^NOT_NULL}} | null{{/NOT_NULL}};
{{/each}}
}

export type {{TABLE_NAME_SHORT_PASCAL_CASE}}PrimaryKeys = {{#if PRIMARY_SHORT.length}}
    {{#each PRIMARY_SHORT}}
        '{{this}}'{{#unless @last}} |{{/unless}}
    {{/each}};
{{else}}
    never;
{{/if}}

const {{TABLE_NAME_SHORT}}:
    C6RestfulModel<
        '{{TABLE_NAME_SHORT}}',
        i{{TABLE_NAME_SHORT_PASCAL_CASE}},
        {{TABLE_NAME_SHORT_PASCAL_CASE}}PrimaryKeys
    > = {
    TABLE_NAME: '{{TABLE_NAME}}',
    {{#each COLUMNS_UPPERCASE}}
    {{@key}}: '{{this}}',
    {{/each}}
    PRIMARY: [
    {{#PRIMARY}}
        '{{this}}',
    {{/PRIMARY}}
    ],
    PRIMARY_SHORT: [
    {{#each PRIMARY_SHORT}}
        '{{this}}',
    {{/each}}
    ],
    COLUMNS: {
    {{#each COLUMNS}}
        '{{@key}}': '{{this}}',
    {{/each}}
    },
    TYPE_VALIDATION: {
    {{#each TYPE_VALIDATION}}
        '{{@key}}': {
            MYSQL_TYPE: '{{this.MYSQL_TYPE}}',
            MAX_LENGTH: '{{this.MAX_LENGTH}}',
            AUTO_INCREMENT: {{this.AUTO_INCREMENT}},
            SKIP_COLUMN_IN_POST: {{this.SKIP_COLUMN_IN_POST}}
        },
    {{/each}}
    },
    REGEX_VALIDATION: {
    {{#each REGEX_VALIDATION}}
        '{{@key}}': '{{this}}',
    {{/each}}
    },
    LIFECYCLE_HOOKS: {
        GET: {beforeProcessing:{}, beforeExecution:{}, afterExecution:{}, afterCommit:{}},
        PUT: {beforeProcessing:{}, beforeExecution:{}, afterExecution:{}, afterCommit:{}},
        POST: {beforeProcessing:{}, beforeExecution:{}, afterExecution:{}, afterCommit:{}},
        DELETE: {beforeProcessing:{}, beforeExecution:{}, afterExecution:{}, afterCommit:{}},
    },
    TABLE_REFERENCES: {
        {{#each TABLE_REFERENCES}}'{{@key}}': [{{#this}}{
            TABLE: '{{TABLE}}',
            COLUMN: '{{COLUMN}}',
            CONSTRAINT: '{{CONSTRAINT}}',
        },{{/this}}],{{/each}}
    },
    TABLE_REFERENCED_BY: {
        {{#each TABLE_REFERENCED_BY}}'{{@key}}': [{{#this}}{
            TABLE: '{{TABLE}}',
            COLUMN: '{{COLUMN}}',
            CONSTRAINT: '{{CONSTRAINT}}',
        },{{/this}}],{{/each}}
    }
}
{{/TABLES}}

export const TABLES = {
{{#TABLES}}{{TABLE_NAME_SHORT}},{{/TABLES}}
} satisfies {
    [K in keyof RestTableInterfaces]: C6RestfulModel<K, RestTableInterfaces[K], keyof RestTableInterfaces[K] & string>;
};

export type RestTableInterfaces = {{{RestTableInterfaces}}};

export const C6 : iC6Object<RestTableInterfaces> = {
    ...C6Constants,
    C6VERSION: '{{C6VERSION}}',
    PREFIX: RestTablePrefix,
    TABLES: TABLES,
    ORM: [],
    ...TABLES
};

export type tStatefulApiData<T> = T[] | undefined | null;

// this refers to the value types of the keys above, aka values in the state
export interface iRestfulObjectArrayTypes {
    {{#TABLES}}
    {{TABLE_NAME_SHORT}}: tStatefulApiData<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>,
    {{/TABLES}}
}

export type tRestfulObjectArrayValues = iRestfulObjectArrayTypes[keyof iRestfulObjectArrayTypes];

export const initialRestfulObjectsState: iRestfulObjectArrayTypes = {
    {{#TABLES}}
    {{TABLE_NAME_SHORT}}: undefined,
    {{/TABLES}}
};

export const COLUMNS = {
    {{#TABLES}}{{#each TYPE_VALIDATION}}'{{@key}}': '{{this.COLUMN_NAME}}',{{/each}}
 {{/TABLES}}
};

export const GLOBAL_REST_PARAMETERS: Omit<iRest<
    RestShortTableNames,
    RestTableInterfaces>, "requestMethod" | "restModel"> = {
        C6: C6,
        restURL: {{{REST_URL_EXPRESSION}}},
};

{{#TABLES}}
export const {{TABLE_NAME_SHORT_PASCAL_CASE}} = {
    ...{{TABLE_NAME_SHORT}},
    ...restOrm<
        OrmGenerics<any, '{{TABLE_NAME_SHORT}}', i{{TABLE_NAME_SHORT_PASCAL_CASE}}, {{TABLE_NAME_SHORT_PASCAL_CASE}}PrimaryKeys{{#if INTERFACE_OVERRIDES}}, {{{INTERFACE_OVERRIDES}}}{{/if}}>
    >(() => ({
        ...GLOBAL_REST_PARAMETERS,
        restModel: {{TABLE_NAME_SHORT}}{{#if OBJECT_OVERRIDES}},
        {{{OBJECT_OVERRIDES}}}{{/if}}
    }))
}

{{/TABLES}}
C6.ORM = [{{#TABLES}}
    {{TABLE_NAME_SHORT_PASCAL_CASE}},{{/TABLES}}
];


