import {
    C6Constants,
    iC6Object,
    iC6RestfulModel,
    tC6Tables,
    iRestApiFunctions,
    iPostC6RestResponse,
    iDeleteC6RestResponse,
    iPutC6RestResponse,
    iAPI,
    removePrefixIfExists
} from "@carbonorm/carbonnode";
import {AxiosResponse} from "axios";


export const RestTablePrefix = '{{{PREFIX}}}';

export type RestTableNames = {{{RestTableNames}}};

export type RestShortTableNames = {{{RestShortTableNames}}};

{{#TABLES}}

export interface i{{TABLE_NAME_SHORT_PASCAL_CASE}} {
{{#each TYPE_VALIDATION}}
    '{{this.COLUMN_NAME}}'?: {{this.TYPESCRIPT_TYPE}}{{^NOT_NULL}} | null{{/NOT_NULL}};
{{/each}}
}

interface iDefine{{TABLE_NAME_SHORT_PASCAL_CASE}} {
{{#each COLUMNS_UPPERCASE}}
    '{{@key}}': string;
{{/each}}
}

export const {{TABLE_NAME_SHORT}}: iC6RestfulModel<RestTableNames> & iDefine{{TABLE_NAME_SHORT_PASCAL_CASE}} = {
    TABLE_NAME: '{{TABLE_NAME}}',
    {{#each COLUMNS_UPPERCASE}}
    {{@key}}: '{{this}}',
    {{/each}}
    PRIMARY: [
    {{#PRIMARY}}
        '{{this}}',
    {{/PRIMARY}}
    ],
    PRIMARY_SHORT: [
    {{#each PRIMARY_SHORT}}
        '{{this}}',
    {{/each}}
    ],
    COLUMNS: {
    {{#each COLUMNS}}
        '{{@key}}': '{{this}}',
    {{/each}}
    },
    TYPE_VALIDATION: {
    {{#each TYPE_VALIDATION}}
        '{{@key}}': {
            MYSQL_TYPE: '{{this.MYSQL_TYPE}}',
            MAX_LENGTH: '{{this.MAX_LENGTH}}',
            AUTO_INCREMENT: {{this.AUTO_INCREMENT}},
            SKIP_COLUMN_IN_POST: {{this.SKIP_COLUMN_IN_POST}}
        },
    {{/each}}
    },
    REGEX_VALIDATION: {
    {{#each REGEX_VALIDATION}}
        '{{@key}}': '{{this}}',
    {{/each}}
    },
    TABLE_REFERENCES: {
        {{#each TABLE_REFERENCES}}'{{@key}}': [{{#this}}{
            TABLE: '{{TABLE}}',
            COLUMN: '{{COLUMN}}',
            CONSTRAINT: '{{CONSTRAINT}}',
        },{{/this}}],{{/each}}
    },
    TABLE_REFERENCED_BY: {
        {{#each TABLE_REFERENCED_BY}}'{{@key}}': [{{#this}}{
            TABLE: '{{TABLE}}',
            COLUMN: '{{COLUMN}}',
            CONSTRAINT: '{{CONSTRAINT}}',
        },{{/this}}],{{/each}}
    }
}
{{/TABLES}}


export const TABLES: tC6Tables = {
{{#TABLES}}
    {{TABLE_NAME_SHORT}}: {{TABLE_NAME_SHORT}},
{{/TABLES}}
};

let dynamicImportCache = {};

async function dynamicRestImport(tableName: string) : Promise<{
    default: iRestApiFunctions,
    postState: (response: AxiosResponse<iPostC6RestResponse<any>>, request: iAPI<any>, id: string | number | boolean) => void,
    deleteState: (response: AxiosResponse<iDeleteC6RestResponse<any>>, request: iAPI<any>) => void,
    putState: (response: AxiosResponse<iPutC6RestResponse<any>>, request: iAPI<any>) => void,
}> {

    tableName = tableName.toLowerCase();

    if (dynamicImportCache[tableName]) {

            return dynamicImportCache[tableName]

    }

    // if tableName is not a key in the TABLES object then throw an error
    if (!TABLES[tableName]) {

        const error = (table: string) => {
            throw Error('Table (' + table + ') does not exist in the TABLES object. Possible values include (' + Object.keys(TABLES).join(', ') + ')');
        }

        if (!tableName.startsWith(RestTablePrefix.toLowerCase())) {

            error(tableName);

        }

        tableName = removePrefixIfExists(tableName, RestTablePrefix);

        if (!TABLES[tableName]) {

            error(tableName);

        }

   }

    const module = await import('./' + (tableName.split('_')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join('')) + '.ts');

   dynamicImportCache[tableName] = module

    return module

}

export const C6 : iC6Object = {
    ...C6Constants,
    C6VERSION: '{{C6VERSION}}',
    IMPORT: dynamicRestImport,
    PREFIX: RestTablePrefix,
    TABLES: TABLES,
    ...TABLES
};

export const COLUMNS = {
{{#TABLES}}{{#each TYPE_VALIDATION}}'{{@key}}': '{{this.COLUMN_NAME}}',{{/each}}
{{/TABLES}}

};


export type RestTableInterfaces = {{{RestTableInterfaces}}};

export type tStatefulApiData<T> = T[] | undefined | null;


// this refers to the value types of the keys above, aka values in the state
export interface iRestfulObjectArrayTypes {
    {{#TABLES}}
    {{TABLE_NAME_SHORT}}: tStatefulApiData<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>,
    {{/TABLES}}
}

export const initialRestfulObjectsState: iRestfulObjectArrayTypes = {
    {{#TABLES}}
    {{TABLE_NAME_SHORT}}: undefined,
    {{/TABLES}}
};

export type tRestfulObjectArrayValues = iRestfulObjectArrayTypes[keyof iRestfulObjectArrayTypes];

