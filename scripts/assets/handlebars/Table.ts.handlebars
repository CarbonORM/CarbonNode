import {
    iPostC6RestResponse,
    restRequest,
    GET,
    POST,
    PUT,
    DELETE,
    iDeleteC6RestResponse,
    iGetC6RestResponse,
    iPutC6RestResponse,{{#REACT_IMPORT}}
    getPrimaryKeyTypes,
    removeInvalidKeys,
    iAPI,
    Modify{{/REACT_IMPORT}}
} from "@carbonorm/carbonnode";{{#REACT_IMPORT}}
import {AxiosResponse} from "axios";{{/REACT_IMPORT}}
import {C6, {{TABLE_NAME_SHORT}}, i{{TABLE_NAME_SHORT_PASCAL_CASE}}, {{TABLE_NAME_SHORT_PASCAL_CASE}}PrimaryKeys} from "./C6";{{#if REACT_IMPORT}}
{{{REACT_IMPORT}}};{{/if}}

/**
{{{TABLE_DEFINITION}}}
**/

type GetCustomAndRequiredFields = {}

type GetRequestTableOverrides = {}

// required parameters, optional parameters, parameter type overrides, response, and table names
const Get = restRequest<
    '{{TABLE_NAME_SHORT}}',
    i{{TABLE_NAME_SHORT_PASCAL_CASE}},
    {{TABLE_NAME_SHORT_PASCAL_CASE}}PrimaryKeys,
    GetCustomAndRequiredFields,
    GetRequestTableOverrides,
    iGetC6RestResponse<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>
>({
    C6: C6,
    restURL: {{{REST_URL_EXPRESSION}}},
    restModel: {{TABLE_NAME_SHORT}},
    requestMethod: GET,
    queryCallback: (request) => {
        request.success ??= 'Successfully received {{TABLE_NAME_SHORT}}!'
        request.error ??= 'An unknown issue occurred creating the {{TABLE_NAME_SHORT}}!'
        return request
    },{{#if REACT_IMPORT}}
    responseCallback: (response, _request) => {
        const responseData = response?.data?.rest;
        {{CARBON_REACT_INSTANCE}}.updateRestfulObjectArrays<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>({
            dataOrCallback: Array.isArray(responseData) ? responseData : [responseData],
            stateKey: "{{TABLE_NAME_SHORT}}",
            uniqueObjectId: C6.{{TABLE_NAME_SHORT}}.PRIMARY_SHORT as (keyof i{{TABLE_NAME_SHORT_PASCAL_CASE}})[]
        })
    }{{/if}}
});

type PutCustomAndRequiredFields = {}

type PutRequestTableOverrides = {}

{{#if REACT_IMPORT}}
export function putState(response: AxiosResponse<iPutC6RestResponse<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>>, request: iAPI<Modify<i{{TABLE_NAME_SHORT_PASCAL_CASE}}, PutRequestTableOverrides>> & PutCustomAndRequiredFields) {
    {{CARBON_REACT_INSTANCE}}.updateRestfulObjectArrays<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>({
        dataOrCallback: [
            removeInvalidKeys<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>({
                ...request,
                ...response?.data?.rest,
            }, C6.TABLES)
        ],
        stateKey: "{{TABLE_NAME_SHORT}}",
        uniqueObjectId: {{TABLE_NAME_SHORT}}.PRIMARY_SHORT as (keyof i{{TABLE_NAME_SHORT_PASCAL_CASE}})[]
    })
}
{{/if}}

const Put = restRequest<
    '{{TABLE_NAME_SHORT}}',
    i{{TABLE_NAME_SHORT_PASCAL_CASE}},
    {{TABLE_NAME_SHORT_PASCAL_CASE}}PrimaryKeys,
    GetCustomAndRequiredFields,
    GetRequestTableOverrides,
    iPutC6RestResponse<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>
>({
    C6: C6,
    restURL: {{{REST_URL_EXPRESSION}}},
    restModel: {{TABLE_NAME_SHORT}},
    requestMethod: PUT,
    queryCallback: (request) => {
        request.success ??= 'Successfully updated {{TABLE_NAME_SHORT}} data!'
        request.error ??= 'An unknown issue occurred updating the {{TABLE_NAME_SHORT}} data!'
        return request
    },{{#if REACT_IMPORT}}
    responseCallback: putState{{/if}}
});

type PostCustomAndRequiredFields = {}

type PostRequestTableOverrides = {}

{{#if REACT_IMPORT}}export function postState(
    response: AxiosResponse<iPostC6RestResponse<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>>,
    request: iAPI<Modify<i{{TABLE_NAME_SHORT_PASCAL_CASE}}, PostRequestTableOverrides>> & PostCustomAndRequiredFields,
    success: i{{TABLE_NAME_SHORT_PASCAL_CASE}}[{{TABLE_NAME_SHORT_PASCAL_CASE}}PrimaryKeys] | string | number | boolean | undefined
) {

    if (1 !== {{TABLE_NAME_SHORT}}.PRIMARY_SHORT.length) {

        console.error("C6 received unexpected result's given the primary key length");

    } else {

        const pk = {{TABLE_NAME_SHORT}}.PRIMARY_SHORT[0];

        const pkTypes = getPrimaryKeyTypes({{TABLE_NAME_SHORT}});

        const expectedType = pkTypes[pk];

        if (expectedType === typeof success) {

            return;

        }

        request[pk] = success as i{{TABLE_NAME_SHORT_PASCAL_CASE}}[{{TABLE_NAME_SHORT_PASCAL_CASE}}PrimaryKeys]

    }

    {{CARBON_REACT_INSTANCE}}.updateRestfulObjectArrays<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>({
        dataOrCallback: undefined !== request.dataInsertMultipleRows
            ? request.dataInsertMultipleRows.map((request, index) => {
                return removeInvalidKeys<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>({
                    ...request,
                    ...(index === 0 ? response?.data?.rest : {}),
                }, C6.TABLES)
            })
            : [
                removeInvalidKeys<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>({
                    ...request,
                    ...response?.data?.rest,
                }, C6.TABLES)
            ],
        stateKey: "{{TABLE_NAME_SHORT}}",
        uniqueObjectId: {{TABLE_NAME_SHORT}}.PRIMARY_SHORT as (keyof i{{TABLE_NAME_SHORT_PASCAL_CASE}})[]
    })
}{{/if}}

const Post = restRequest<
    '{{TABLE_NAME_SHORT}}',
    i{{TABLE_NAME_SHORT_PASCAL_CASE}},
    {{TABLE_NAME_SHORT_PASCAL_CASE}}PrimaryKeys,
    GetCustomAndRequiredFields,
    GetRequestTableOverrides,
    iPostC6RestResponse<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>
>({
    C6: C6,
    restURL: {{{REST_URL_EXPRESSION}}},
    restModel: {{TABLE_NAME_SHORT}},
    requestMethod: POST,
    queryCallback: (request) => {
        request.success ??= 'Successfully created the {{TABLE_NAME_SHORT}} data!'
        request.error ??= 'An unknown issue occurred creating the {{TABLE_NAME_SHORT}} data!'
        return request
    },{{#if REACT_IMPORT}}
    responseCallback: postState{{/if}}
});

type DeleteCustomAndRequiredFields = {}

type DeleteRequestTableOverrides = {}

{{#if REACT_IMPORT}}
export function deleteState(_response: AxiosResponse<iDeleteC6RestResponse<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>>, request: iAPI<Modify<i{{TABLE_NAME_SHORT_PASCAL_CASE}}, DeleteRequestTableOverrides>> & DeleteCustomAndRequiredFields) {
    {{CARBON_REACT_INSTANCE}}.deleteRestfulObjectArrays<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>({
        dataOrCallback: [
            request
        ],
        stateKey: "{{TABLE_NAME_SHORT}}",
        uniqueObjectId: {{TABLE_NAME_SHORT}}.PRIMARY_SHORT as (keyof i{{TABLE_NAME_SHORT_PASCAL_CASE}})[]
    })
}
{{/if}}

const Delete  = restRequest<
    '{{TABLE_NAME_SHORT}}',
    i{{TABLE_NAME_SHORT_PASCAL_CASE}},
    {{TABLE_NAME_SHORT_PASCAL_CASE}}PrimaryKeys,
    GetCustomAndRequiredFields,
    GetRequestTableOverrides,
    iDeleteC6RestResponse<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>
>({
    C6: C6,
    restURL: {{{REST_URL_EXPRESSION}}},
    restModel: {{TABLE_NAME_SHORT}},
    requestMethod: DELETE,
    queryCallback: (request) => {
        request.success ??= 'Successfully removed the {{TABLE_NAME_SHORT}} data!'
        request.error ??= 'An unknown issue occurred removing the {{TABLE_NAME_SHORT}} data!'
        return request
    },{{#if REACT_IMPORT}}
    responseCallback: deleteState{{/if}}
});

const {{TABLE_NAME_SHORT_PASCAL_CASE}} = {
    // Export all GET, POST, PUT, DELETE functions for each table
    Get,
    Post,
    Put,
    Delete,
}

export default {{TABLE_NAME_SHORT_PASCAL_CASE}};
