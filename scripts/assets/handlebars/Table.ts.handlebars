import {AxiosResponse} from "axios";
import {
    iPostC6RestResponse,
    restRequest,
    GET,
    POST,
    PUT,
    DELETE,
    iDeleteC6RestResponse,
    iGetC6RestResponse,
    iPutC6RestResponse,
    removeInvalidKeys,
    iAPI,
    Modify
} from "@carbonorm/carbonnode";
import {C6, i{{TABLE_NAME_SHORT_PASCAL_CASE}}, {{TABLE_NAME_SHORT}}, RestTableNames} from "./C6";{{#REACT_IMPORT}}
import {deleteRestfulObjectArrays, updateRestfulObjectArrays} from "@carbonorm/carbonreact";
{{REACT_IMPORT}};{{/REACT_IMPORT}}

/**
{{{TABLE_DEFINITION}}}
**/

type GetCustomAndRequiredFields = {}

type GetRequestTableOverrides = {}

// required parameters, optional parameters, parameter type overrides, response, and table names
const Get = restRequest<GetCustomAndRequiredFields, i{{TABLE_NAME_SHORT_PASCAL_CASE}}, GetRequestTableOverrides, iGetC6RestResponse<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>, RestTableNames>({
    C6: C6,
    restURL: {{{REST_URL_EXPRESSION}}},
    tableName: {{TABLE_NAME_SHORT}}.TABLE_NAME,
    requestMethod: GET,
    queryCallback: (request) => {
        request.success ??= 'Successfully received {{TABLE_NAME_SHORT}}!'
        request.error ??= 'An unknown issue occurred creating the {{TABLE_NAME_SHORT}}!'
        return request
    },{{#REACT_IMPORT}}
    responseCallback: (response, _request) => {
        const responseData = response?.data?.rest;
        {{REACT_IMPORT}}.updateRestfulObjectArrays<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>({{CARBON_REACT_INSTANCE}},Array.isArray(responseData) ? responseData : [responseData], "{{TABLE_NAME_SHORT}}", C6.{{TABLE_NAME_SHORT}}.PRIMARY_SHORT as (keyof i{{TABLE_NAME_SHORT_PASCAL_CASE}})[])
    }{{/REACT_IMPORT}}
});

type PutCustomAndRequiredFields = {}

type PutRequestTableOverrides = {}

{{#REACT_IMPORT}}
export function putState{{TABLE_NAME_SHORT_PASCAL_CASE}}(response : AxiosResponse<iPutC6RestResponse<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>>, request : iAPI<Modify<i{{TABLE_NAME_SHORT_PASCAL_CASE}}, PutRequestTableOverrides>> & PutCustomAndRequiredFields) {
    {{REACT_IMPORT}}.updateRestfulObjectArrays<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>({{CARBON_REACT_INSTANCE}}, [
        removeInvalidKeys<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>({
            ...request,
            ...response?.data?.rest,
        }, C6.TABLES)
    ], "{{TABLE_NAME_SHORT}}", {{TABLE_NAME_SHORT}}.PRIMARY_SHORT as (keyof i{{TABLE_NAME_SHORT_PASCAL_CASE}})[])
}{{/REACT_IMPORT}}

const Put = restRequest<PutCustomAndRequiredFields, i{{TABLE_NAME_SHORT_PASCAL_CASE}}, PutRequestTableOverrides, iPutC6RestResponse<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>, RestTableNames>({
    C6: C6,
    restURL: {{{REST_URL_EXPRESSION}}},
    tableName: {{TABLE_NAME_SHORT}}.TABLE_NAME,
    requestMethod: PUT,
    queryCallback: (request) => {
        request.success ??= 'Successfully updated {{TABLE_NAME_SHORT}} data!'
        request.error ??= 'An unknown issue occurred updating the {{TABLE_NAME_SHORT}} data!'
        return request
    },{{#REACT_IMPORT}}
    responseCallback: putState{{TABLE_NAME_SHORT_PASCAL_CASE}}{{/REACT_IMPORT}}
});

type PostCustomAndRequiredFields = {}

type PostRequestTableOverrides = {}

{{#REACT_IMPORT}}export function postState{{TABLE_NAME_SHORT_PASCAL_CASE}}(response : AxiosResponse<iPostC6RestResponse<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>>, request : iAPI<Modify<i{{TABLE_NAME_SHORT_PASCAL_CASE}}, PostRequestTableOverrides>> & PostCustomAndRequiredFields, id: string | number | boolean) {
    if ('number' === typeof id || 'string' === typeof id) {
        if (1 !== {{TABLE_NAME_SHORT}}.PRIMARY_SHORT.length) {
            console.error("C6 received unexpected result's given the primary key length");
        } else {
            request[{{TABLE_NAME_SHORT}}.PRIMARY_SHORT[0]] = id
        }
    }
    {{REACT_IMPORT}}.updateRestfulObjectArrays<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>(
        undefined !== request.dataInsertMultipleRows
            ? request.dataInsertMultipleRows.map((request, index) => {
                return removeInvalidKeys<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>({
                    ...request,
                    ...(index === 0 ? response?.data?.rest : {}),
                }, C6.TABLES)
            })
            : [
                removeInvalidKeys<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>({
                    ...request,
                    ...response?.data?.rest,
                    }, C6.TABLES)
            ],
        "{{TABLE_NAME_SHORT}}",
        {{TABLE_NAME_SHORT}}.PRIMARY_SHORT as (keyof i{{TABLE_NAME_SHORT_PASCAL_CASE}})[]
    )
}{{/REACT_IMPORT}}

const Post = restRequest<PostCustomAndRequiredFields, i{{TABLE_NAME_SHORT_PASCAL_CASE}}, PostRequestTableOverrides, iPostC6RestResponse<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>, RestTableNames>({
    C6: C6,{{#REACT_IMPORT}}
    instance: {{CARBON_REACT_INSTANCE}}{{/REACT_IMPORT}}
    restURL: {{{REST_URL_EXPRESSION}}},
    tableName: {{TABLE_NAME_SHORT}}.TABLE_NAME,
    requestMethod: POST,
    queryCallback: (request) => {
        request.success ??= 'Successfully created the {{TABLE_NAME_SHORT}} data!'
        request.error ??= 'An unknown issue occurred creating the {{TABLE_NAME_SHORT}} data!'
        return request
    },{{#REACT_IMPORT}}
    responseCallback: postState{{TABLE_NAME_SHORT_PASCAL_CASE}}{{/REACT_IMPORT}}
});

type DeleteCustomAndRequiredFields = {}

type DeleteRequestTableOverrides = {}

{{#REACT_IMPORT}}export function deleteState{{TABLE_NAME_SHORT_PASCAL_CASE}}(_response : AxiosResponse<iDeleteC6RestResponse<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>>, request : iAPI<Modify<i{{TABLE_NAME_SHORT_PASCAL_CASE}}, DeleteRequestTableOverrides>> & DeleteCustomAndRequiredFields) {
    {{REACT_IMPORT}}.deleteRestfulObjectArrays<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>([
        request
    ], "{{TABLE_NAME_SHORT}}", {{TABLE_NAME_SHORT}}.PRIMARY_SHORT as (keyof i{{TABLE_NAME_SHORT_PASCAL_CASE}})[])
}{{/REACT_IMPORT}}

const Delete = restRequest<DeleteCustomAndRequiredFields, i{{TABLE_NAME_SHORT_PASCAL_CASE}}, DeleteRequestTableOverrides, iDeleteC6RestResponse<i{{TABLE_NAME_SHORT_PASCAL_CASE}}>, RestTableNames>({
    C6: C6,{{#REACT_IMPORT}}
    instance: {{CARBON_REACT_INSTANCE}}{{/REACT_IMPORT}}
    restURL: {{{REST_URL_EXPRESSION}}},
    tableName: {{TABLE_NAME_SHORT}}.TABLE_NAME,
    requestMethod: DELETE,
    queryCallback: (request) => {
        request.success ??= 'Successfully removed the {{TABLE_NAME_SHORT}} data!'
        request.error ??= 'An unknown issue occurred removing the {{TABLE_NAME_SHORT}} data!'
        return request
    },{{#REACT_IMPORT}}
    responseCallback: deleteState{{TABLE_NAME_SHORT_PASCAL_CASE}}{{/REACT_IMPORT}}
});

const {{TABLE_NAME_SHORT_PASCAL_CASE}} = {
    // Export all GET, POST, PUT, DELETE functions for each table
    Get,
    Post,
    Put,
    Delete,
}

export default {{TABLE_NAME_SHORT_PASCAL_CASE}};
